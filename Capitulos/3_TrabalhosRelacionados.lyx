#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass extbook
\use_default_options true
\master ../Principal.lyx
\maintain_unincluded_children false
\language brazilian
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Trabalhos Relacionados
\end_layout

\begin_layout Standard
Este capítulo tem por finalidade apresentar os principais trabalhos de framework
s e middlewares para a área de Internet das Coisas, que visam lidar com
 a grande heterogeneidade de dispositivos e protocolos, fornecendo uma interface
 única e simples de comunicação.
\end_layout

\begin_layout Standard
Os trabalhos foram selecionados com base nas similaridades com a proposta
 desse trabalho e com requisitos de código fonte e documentação disponível
 para análises e testes.
 Alguns trabalhos foram abordados devido a sua importância para área de
 pesquisa e fundamentos dos conceitos iniciais de Internet das Coisas.
\end_layout

\begin_layout Section
OpenIoT
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
STOP
\end_layout

\end_inset


\end_layout

\begin_layout Standard
O OpenIoT é um projeto co-financiado pelo FP7 (European Union's Research
 and Innovation), para permitir "criar aplicações da Internet das Coisas
 em grande escala de acordo com um modelo de entrega de 
\emph on
cloud computing
\emph default
"
\begin_inset CommandInset citation
LatexCommand cite
key "kim2014openiot"

\end_inset

 O objetivo principal é desenvolver uma infraestrutura de middleware para
 implementar e integrar soluções da Internet das Coisas em um paradigma
 "Sensing as a Service".
 
\end_layout

\begin_layout Standard
O projeto foca na convergência entre IoT e computação em nuvem, visando
 assim fornecer uma “nuvem de coisas” (cloud of things, em Inglês).
 Ele é apresentado como uma extensão para implementações de serviços e recursos
 computacionais remotos, onde ele irá fornecer acesso a recursos e capacidades
 dos dispositivos gerenciados pela sua plataforma.
 OpenIoT abrange diversas áreas, a fim de constituir uma solução mais completa:
\end_layout

\begin_layout Itemize
Middleware - para conexão de sensores e redes de sensores com a plataforma
 (sensores ou fluxos de dados, a partir de dispositivos físicos ou algoritmos
 de processamento apresentado como dispositivos virtuais);
\end_layout

\begin_layout Itemize
Integração de Sensores - representado como sensores virtuais, utilizando
 estruturas de middleware para redes de RFID / sensores sem fio (RSSF) e
 Internet das coisas, fornecendo funcionalidades de linha de base para o
 registro e de pesquisa, integração de sensores com o mínimo esforço;
\end_layout

\begin_layout Itemize
Ontologias, modelos semânticos e anotações - para representar informações
 sobre objetos;
\end_layout

\begin_layout Itemize
Computação em Nuvem, para fornecer disponibilidade com segurança e privacidade;
\end_layout

\begin_layout Itemize
Configuração flexível e implementação de algoritmos para a coleta e filtragem
 de fluxos de informação;
\end_layout

\begin_layout Itemize
Ferramentas visuais para gerenciar sensores e seus dados, para a composição
 de serviços e para a visualização de dados com esforço mínimo de programação.
\end_layout

\begin_layout Standard
A arquitetura da OpenIoT (Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:OpenIoT"

\end_inset

) é composta por três planos lógicos distintos: (1) Utilitário/Aplicação;
 (2) Plano Virtualizado; e (3) Plano Físico.
 Tais planos, por sua vez, são compostos por sete módulos principais, apresentad
os a seguir.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../Imagens/Cap_3/OpenIoT-Architecture.jpg
	lyxscale 60
	width 100line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Arquitetura OpenIoT 
\begin_inset CommandInset citation
LatexCommand cite
key "ZShelby2009"

\end_inset

 
\begin_inset CommandInset label
LatexCommand label
name "fig:OpenIoT"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph*
Plano Utilitário / Aplicação 
\end_layout

\begin_layout Itemize
O componente 
\emph on
Request Definition,
\emph default
 permite especificação, em tempo de execução, de solicitações de serviços
 para a plataforma OpenIoT, fornecendo uma interface Web 2.0.
 Compreende um conjunto de serviços para a especificar e formular tais pedidos,
 ao mesmo tempo, submetê-los ao agendador (
\emph on
Scheduler)
\emph default
 global.
\end_layout

\begin_layout Itemize
O componente 
\emph on
Request Presentation
\emph default
, seleciona mashups a partir de uma biblioteca apropriada, a fim de facilitar
 a apresentação de um serviço em uma interface Web 2.0.
 Para visualizar estes serviços, ele se comunica diretamente com o Service
 Delivery & Utility Manager, de modo a recuperar os dados relevantes.
\end_layout

\begin_layout Itemize
A componente de configuração e monitoramento (
\emph on
Configuration and Monitoring
\emph default
), permite o gerenciamento e configuração de funcionalidades sobre os sensores
 e os serviços que são implantados dentro da plataforma OpenIoT.
 Além disso, permite ao usuário monitorar o estado dos diferentes módulos
 implementados.
\end_layout

\begin_layout Paragraph*
Plano Virtualizado
\end_layout

\begin_layout Itemize
O agendador (Scheduler) processa todas as solicitações de serviços a partir
 da definição da solicitação (Request Definition) e garante o seu acesso
 adequado aos recursos (por exemplo, fluxos de dados) de que necessitam.
 
\end_layout

\begin_layout Itemize
A Nuvem de armazenamento de dados (LSM-Light), permite o armazenamento de
 fluxos de dados provenientes do sensor, agindo assim como um banco de dados
 em nuvem.
 O serviço armazena os metadados necessários para o funcionamento da plataforma
 OpenIoT (dados funcionais).
 A implementação do protótipo da plataforma OpenIoT usa o LSM Middleware,
 que foi re-projetado com funcionalidades de dados push-pull e interfaces
 para permitir streaming de processamento baseado em nuvem.
\end_layout

\begin_layout Itemize
O serviço de entrega e gerenciador de utilitários (Service Delivery & Utility
 Manager), executa um duplo papel.
 Por um lado, ele combina os fluxos de dados como indicado pelos fluxos
 de trabalho (workflows) dentro do sistema OpenIoT a fim de entregar o serviço
 solicitado (com a ajuda da consulta SPARQL fornecido pelo Scheduler), quer
 para a solicitação de apresentação ou um aplicativo externo.
 Por outro lado, esse componente atua como um mecanismo de medição de utilização
 dos serviços, o que mantém o controle das métricas cada serviço individualmente.
\end_layout

\begin_layout Paragraph*
Plano Físico
\end_layout

\begin_layout Itemize
O Sensor-Middleware (Extended Global Sensor Network, X-GSN), recolhe, filtra,
 combina, e semanticamente anota fluxos de dados a partir de sensores virtuais
 ou dispositivos físicos.
 Ele atua como um hub entre a plataforma OpenIoT e o mundo físico.
 O Sensor-Middleware é implantado com base em uma ou mais instâncias distribuído
s (nós), que podem pertencer a diferentes entidades administrativas.
 A implementação do protótipo da plataforma OpenIoT usa o sensor-middleware
 GSN que foi ampliado e chamado X-GSN.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
The OpenIoT Architecture is an instantiation of the reference architecture
 of the European Research Cluster on the Internet of Things (IERC)
\end_layout

\end_inset


\end_layout

\begin_layout Section
Eclipse IoT
\end_layout

\begin_layout Standard
Eclipse IoT é um ecossistema de empresas e indivíduos que trabalham em conjunto
 para estabelecer uma Internet das Coisas com base em tecnologias abertas
\begin_inset CommandInset citation
LatexCommand cite
key "eclipse:iot"

\end_inset

.
 O projeto fornece blocos de construção que se apoiam em cima de padrões
 e protocolos abertos e fornecem serviços e estruturas adicionais para gerenciam
ento de dispositivos, comunicação e soluções verticais.
\end_layout

\begin_layout Standard
O primeiro projeto Eclipse IoT começou em novembro de 2012, hoje é composto
 por subprojetos, focados no desenvolvimento de aplicações para Internet
 das coisas e M2M.
 Em seguida é apresentado os principais projetos mantidos de grupo.
\end_layout

\begin_layout Subsection
Padrões e Protocolos
\end_layout

\begin_layout Itemize

\series bold
Paho
\series default
: prevê a implementação de clientes para o protocolo de mensagens MQTT.
 O Paho, inclui clientes para Java, C, C++, Python, JavaScript e outras
 implementações da da norma MQTT;
\end_layout

\begin_layout Itemize

\series bold
Mosquitto
\series default
: implementação do servidor de MQTT;
\end_layout

\begin_layout Itemize

\series bold
Californium
\series default
: é uma implementação Java do CoAP (Constrained Application Protocol);
\end_layout

\begin_layout Itemize

\series bold
OM2M
\series default
: é uma implementação do padrão OneM2M
\begin_inset CommandInset citation
LatexCommand cite
key "swetina2014toward"

\end_inset

 (anteriormente chamado de padrão ETSI M2M).
 OM2M é um conjunto de serviços Java e OSGi que implementam o padrão OneM2M;
\end_layout

\begin_layout Itemize

\series bold
Wakaama
\series default
: é uma implementação do protocolo OMA Lightweight M2M, para o dispositivos
 e gerenciamento de serviços.
 Wakaama é escrito em C e projetado para ser portátil para sistemas compatíveis
 com POSIX.
\end_layout

\begin_layout Subsection
Frameworks e Serviços
\end_layout

\begin_layout Itemize

\series bold
Kura
\series default
: é um conjunto de serviços Java e OSGi que implementam os serviços comuns
 necessários para um gateway de Internet das Coisas, tais como: (1) conexão
 de I/O com portas seriais, USB, Bluetooth, GPS, (2) serviços de dados,
 (3) gerenciamento remoto, etc.
\end_layout

\begin_layout Itemize

\series bold
Eclipse SCADA
\series default
: é um conjunto de serviços Java e OSGi para a criação de sistemas de controle
 industrial que monitoram e controlam processos industriais, como o chão
 de fábrica ou fazendas solares.
\end_layout

\begin_layout Itemize

\series bold
Eclipse SmartHome
\series default
: é um conjunto de serviços para integração de domótica em Java e OSGi.
 Este projeto fornece um ponto de acesso uniforme para os diversos dispositivos
 e protocolos de automação residencial diferentes.
\end_layout

\begin_layout Itemize

\series bold
Ponte
\series default
: é um broker projetado para fazer a ponte entre protocolos diferentes da
 Internet das Coisas (como MQTT e CoAP) e fornecer uma API REST para esses
 padrões.
\end_layout

\begin_layout Itemize

\series bold
Concierge
\series default
: é uma implementação do padrão OSGi, voltado para pequenos dispositivos
 da Internet das Coisas.
\end_layout

\begin_layout Itemize

\series bold
Krikkit
\series default
: é um projeto para definir regras para as mensagens que passam através
 de um dispositivo de borda (edge device).
\end_layout

\begin_layout Itemize

\series bold
Mihini
\series default
: é um framework baseado em Lua para a criação de aplicativos para gateways
 IoT e M2M.
\end_layout

\begin_layout Standard
O Eclipse IoT é um projeto que vêm ganhando tração e incorporando novos
 projetos
\begin_inset CommandInset citation
LatexCommand cite
key "eclipse:iot:projects"

\end_inset

.
 Hoje conta com cerca de 110 colaboradores e é apoiados por empresas como
 IBM, Eurotech, 2lemetry, Cisco, e outras.
\end_layout

\begin_layout Section
BUTLER
\end_layout

\begin_layout Standard
BUTLER, acrônimo de uBiquitous, secUre inTernet-of-things with Location
 and contExtawaReness, é um desenvolvido no âmbito do FP7, lançado oficialmente
 em 2014, com o propósito de possibilitar o "desenvolvimento de aplicações
 seguras e inteligentes de assistência pessoal graças a um sistema pervasivo
 ciente de contexto e localização"
\begin_inset CommandInset citation
LatexCommand cite
key "BUTLER"

\end_inset

.
 BUTLER se concentra em:
\end_layout

\begin_layout Itemize
Melhorar / criar tecnologias para implementar uma Internet das Coisas que
 seja segura (ligações seguras do físico para as camadas de aplicação),
 pervasiva (aplicações abrangem diferentes cenários) e dependente do contexto
 (ajusta às necessidades do usuário).
\end_layout

\begin_layout Itemize
Integração / desenvolvimento de uma arquitetura em rede de dispositivos
 inteligentes, onde os dispositivos podem ser categorizadas como SmartObjects
 (sensores, atuadores, gateways), Smart Mobile (dispositivo pessoal de usuário)
 e SmartServers (fornecedores de conteúdos e serviços).
\end_layout

\begin_layout Itemize
Realização de estudos de caso para mostrar e ajudar a melhorar o projeto.
\end_layout

\begin_layout Standard
Foram definidos papéis de segurança no nível de aplicação, que refletem
 os stakeholders participantes das interações em cada cenário.
 Os papéis definidos no projeto são
\begin_inset CommandInset citation
LatexCommand cite
key "BUTLER:tec"

\end_inset

:
\end_layout

\begin_layout Itemize
Usuário: entidade que ganha acesso a um recurso.
 Normalmente é um humano, mas pode ser também uma aplicação;
\end_layout

\begin_layout Itemize
Provedor de Recurso: entidade que provê um recurso e opcionalmente o atualiza.
 Ele deve conferir o token de acesso apresentado para que possa prover/atualizar
 um recurso;
\end_layout

\begin_layout Itemize
Consumidor de Recurso: aplicação cliente recuperando e consumindo recursos;
\end_layout

\begin_layout Itemize
Servidor de Autorização: é a entidade que implementa a gestão de controle
 de acesso.
 É responsável pela autenticação do usuário e autorização do consumidor
 de recurso através da geração de um token de acesso, relacionado ao recurso
 que se deseja acessar.
 Opcionalmente, pode delegar a tarefa de autenticação para o servidor de
 autenticação;
\end_layout

\begin_layout Itemize
Servidor de Autenticação: esta entidade pode ser utilizada pelo servidor
 de autorização de modo a confiar em um protocolo de autenticação que não
 é implementado nativamente no servidor de autorização.
 Isso significa que o servidor de autenticação e o servidor de autorização
 precisarão fazer a federação de identidades de usuários.
\end_layout

\begin_layout Standard
A arquitetura do projeto é baseada nas arquiteturas IoT-A e FI-WARE.
 A figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:BUTLER"

\end_inset

, apresenta as quatro principais camadas definidas na arquitetura.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../Imagens/Cap_3/butler.jpg
	width 100line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Arquitetura proposta por BUTLER 
\begin_inset CommandInset citation
LatexCommand cite
key "BUTLER"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:BUTLER"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
Communications Layer:
\series default
 lida com a infraestrutura de comunicação fim-a-fim (com base em normas,
 tanto quanto possível), conectando objetos inteligentes (SmartObjects),
 dispositivos móveis (SmartMobiles) e plataformas de serviços (SmartObject
 Gateways e SmartServers).
 
\end_layout

\begin_layout Itemize

\series bold
Data/Context Management Layer
\series default
: especifica modelos de dados, interfaces e procedimentos de coleta e processame
nto de dados.
 Com informações de contexto, transforma os dados brutos em informações
 ricas.
 
\end_layout

\begin_layout Itemize

\series bold
Services Layer
\series default
: define componentes e interfaces para a descrição, descoberta, implantação
 e provisionamento de serviços sensíveis ao contexto.
 
\end_layout

\begin_layout Itemize

\series bold
System/Device Management Layer:
\series default
 gerencia e mantém objetos inteligentes, serviços e outras entidades, como
 a configuração, gerenciamento de desempenho, ou diagnósticos.
\end_layout

\begin_layout Section
LinkSmart (HYDRA)
\end_layout

\begin_layout Standard
O LinkSmart (anteriormente chamado Hydra), tem como objetivo desenvolver
 um middleware para sistemas embarcados inteligentes, baseado em uma arquitetura
 orientada a serviços, implementável em redes novas ou existentes, com ou
 sem fio, de dispositivos heterogêneos que operam com recursos limitados
 em termos de energia, poder de computação e uso da memória
\begin_inset CommandInset citation
LatexCommand cite
key "sarnovsky2007hydra"

\end_inset

.
 A arquitetura LinkSmart é baseada em três camadas: a camada física, a camada
 de middleware, e a camada de aplicação.
 O middleware HYDRA, foi testado em três domínios, tais como automação predial,
 área da saúde, e agricultura 
\begin_inset CommandInset citation
LatexCommand cite
key "jahn2010energy"

\end_inset

).
 O usuário pode acessar os serviços oferecidos pelo HYDRA através de uma
 interface inteligente móvel.
\end_layout

\begin_layout Standard
Middleware LinkSmart é um software inteligente que é colocado entre as aplicaçõe
s e o sistema operacional para lidar com várias tarefas de uma forma eficiente
 em termos de custos.
 Este middleware fornece uma interface de serviço web para interagir com
 todos os dispositivos físicos, atuadores, sensores ou subsistemas, independente
mente de suas tecnologias de interface de rede, por exemplo, Bluetooth,
 RF, ZigBee, RFID, Wi-Fi, etc.
\end_layout

\begin_layout Standard
Este middleware foi projetado para facilitar a interação com dispositivos,
 abstraindo a partir das informações detalhadas sobre esses dispositivos
 e suas redes.
 O LinkSmart considera cada dispositivo como um serviço, e usa linguagens
 de ontologias, por exemplo, OWL, OWL-s e SAWSDL, para definir as descrições
 semânticas desses dispositivos.
 Além disso, ele fornece uma camada de serviço inteligente, que permite
 aos usuários finais interagirem com esses dispositivos, sem lidar com a
 tecnologia de comunicação que é suportado pelos dispositivos.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
falta imagem
\end_layout

\end_inset


\end_layout

\begin_layout Section
TinyDB
\end_layout

\begin_layout Standard
O middleware TinyDB
\begin_inset CommandInset citation
LatexCommand cite
key "madden2005tinydb"

\end_inset

 foi um dos primeiros projetos a propor a ideia de abstração dispositivos.
 O TinyDB permite que usuários finais interajam com os dispositivos sem
 saber sobre o detalhes da especificação dispositivos, tais como os protocolos
 de comunicação que são suportado por esses dispositivos.
\end_layout

\begin_layout Standard
O projeto fornece uma linguagem de domínio específico (DSL) para usuários
 finais interagirem com os dispositivos.
 Sua DSL é uma linguagem de consulta que suporta seleção, junção, projeção,
 e agregação, para trabalhar com um ambiente de sensoriamento embarcado.
 Esta DSL permite que um usuário final obtenha informações sobre o tempo,
 lugar, tipo e método de amostragem em um ambiente de sensoriamento embarcado.
 TinyDB suporta os seguintes tipos de consultas:
\end_layout

\begin_layout Itemize
Monitoring Queries: Ela pede o valor de um ou mais atributos periodicamente
 e continuamente, tais como, informações sobre a temperatura.
\end_layout

\begin_layout Itemize
Network Health Queries: Ele fornece informações sobre a própria rede.
 Por exemplo, a seleção de nós vizinhos, com baixa vida útil de bateria.
\end_layout

\begin_layout Itemize
Exploratory Query: Ela mostra o estado de um nó específico ou de um conjunto
 de nós em um momento específico, tais como, por exemplo, selecionar a temperatu
ra do sensor através da sua identificação.
\end_layout

\begin_layout Itemize
Actuation Query: Este tipo de consulta pode ser usada para pedir uma ação
 física.
 Por exemplo, um usuário final pode querer ligar um ventilador num ambiente
 em que a temperatura é superior a um limiar.
 
\end_layout

\begin_layout Section
IoT@Work
\end_layout

\begin_layout Standard
Este projeto é focado na automação industrial, levando em considerações
 requisitos de comunicação e segurança.
 O projeto foi fundado pelo FP7 e é liderado pelo Siemens AG
\begin_inset CommandInset citation
LatexCommand cite
key "IoTWork:site"

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "rotondi2011project"

\end_inset

.
\end_layout

\begin_layout Standard
O projeto tem como objetivo reduzir custos operacionais na configuração,
 comissionamento, e manutenção da fabricação, principalmente diminuindo
 o tempo para adaptação a mudanças no sistema.
\end_layout

\begin_layout Standard
Com base nos resultados dos projetos de investigação realizados, o IoT@Work
 se concentra em melhorar a infraestrutura de comunicação e middleware para
 construir a auto-gestão e redes resilientes e arquiteturas de aplicativos
 orientados a serviços adaptados para ambientes de fábrica.
\end_layout

\begin_layout Standard
Os principais objetivos técnicos do projeto estão centrados em torno dos
 seguintes objetivos:
\end_layout

\begin_layout Itemize
A dissociação entre a aplicação de automação e a configuração de rede e
 operação, a fim de:
\end_layout

\begin_deeper
\begin_layout Itemize
Fornecer serviços avançados de comunicações que atendem demandas da aplicação
 em termos de confiabilidade, comunicação em tempo real, escalabilidade
 e segurança.
\end_layout

\begin_layout Itemize
Reduzir os efeitos do processo de reconfiguração da aplicação sobre o montante
 do planejamento manual necessária a nível da rede; 
\end_layout

\end_deeper
\begin_layout Itemize
Integrar mais auto-gestão em uma rede 
\begin_inset Quotes eld
\end_inset

Plug&Work
\begin_inset Quotes erd
\end_inset

, a fim de:
\end_layout

\begin_deeper
\begin_layout Itemize
Ativar 
\begin_inset Quotes eld
\end_inset

Plug&Work
\begin_inset Quotes erd
\end_inset

 em todos os níveis, especialmente durante a fase de configuração das redes
 de automação industrial;
\end_layout

\begin_layout Itemize
Levar em conta a semântica da aplicação e os fluxos de trabalho na estruturação
 e otimização da operação da rede.
\end_layout

\end_deeper
\begin_layout Itemize
Garantir a resiliência e segurança em sistemas de automação em execução,
 a fim de:
\end_layout

\begin_deeper
\begin_layout Itemize
Suporte a cenários de fabricação adaptáveis e ágeis, ao mesmo tempo garantir
 e proteger a confiabilidade e a resiliência dos sistemas;
\end_layout

\begin_layout Itemize
Integrar mecanismos de segurança fortes a nível arquitetônico e evitar acesso
 não autorizado e interferências indesejadas com o processo de produção.
\end_layout

\end_deeper
\begin_layout Subsection
Arquitetura
\end_layout

\begin_layout Standard
A arquitetura para este projeto foi desenvolvido em cooperação com IoT-A
\begin_inset CommandInset citation
LatexCommand cite
key "rotondi2011project"

\end_inset

 e consiste de várias funções que são implementadas por vários componentes,
 que são agrupados três camadas principais, confirme a Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:iot_work"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../Imagens/Cap_3/iot_work.jpg
	width 50line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Arquitetura IOT@Work - Camadas funcionais 
\begin_inset CommandInset citation
LatexCommand cite
key "rotondi2011project"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:iot_work"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard

\series bold
Device and network embedded services
\series default
: realizar funções de gestão, como a atribuição de identificadores, coletando
 semântica de dispositivos e contexto e gestão de interfaces de comunicação.
\end_layout

\begin_layout Standard

\series bold
Device resource creation & management services
\series default
: executar agregação e gestão dos recursos e serviços incorporados e funções,
 tais como o fornecimento de serviços de diretórios, abstração de redes
 e monitoramento do sistema de baixo nível e de gestão de segurança.
\end_layout

\begin_layout Standard

\series bold
Application level middleware services
\series default
: oferece suporte para aplicação por meio de serviços de middleware específicos
 para cenários da Internet das Coisas.
 Nesta camada, a lógica do aplicativo é interpretada através de configuração
 ou em tempo de execução e definição das interfaces com os diferentes componente
s IoT .
\end_layout

\begin_layout Subsection
Tecnologias Integradas
\end_layout

\begin_layout Standard
Descrição da principais tecnologias envolvidas na construção da arquitetura
 do IoT@Work
\begin_inset CommandInset citation
LatexCommand cite
key "IoTWork:site"

\end_inset

.
\end_layout

\begin_layout Itemize

\series bold
Serviço de Diretório
\series default
: fornece um acesso unificado e baseado em padrões para acesso às informações,
 escondendo a complexidade e variedade de protocolos e formatos.
 Armazena informações que podem ser atualizadas através da API RESTful.
\end_layout

\begin_layout Itemize

\series bold
Auto-configuração de rede Ethernet em tempo real
\series default
: Atribuição de endereço IP e URL, descoberta, e configuração em tempo real.
\end_layout

\begin_layout Itemize

\series bold
Gerenciamento de Eventos (Serviço de Notificação de Evento
\series default
): é um componente de middleware que atua como um conector flexível e escalável
 entre fontes de eventos (ex.: 
\emph on
Publishers
\emph default
) e consumidores de eventos (ex.: 
\emph on
Subscribers
\emph default
).
\end_layout

\begin_layout Itemize

\series bold
Controle de Acesso
\series default
: O controle de acesso é apresentado em dois níveis: (1) controle de acesso
 granular para as coisas, agentes, aplicações, consumidores de dados, em
 todos os níveis e (2) controle de acesso para garantir a confiabilidade
 da comunicação e estado da configuração aos dispositivos embarcados.
\end_layout

\begin_layout Itemize

\series bold
Processamento de Eventos Complexos (CEP)
\series default
: realiza processamento inteligente de mensagem (análise de falhas, manutenção
 preditiva), suporta a auto-gestão e permite a filtragem e combinação de
 eventos para criar uma nova funcionalidade (usando regras inteligentes).
\end_layout

\begin_layout Itemize

\series bold
Particionamento de Rede
\series default
: Ferramenta de gerenciamento de virtualização de rede.
\end_layout

\begin_layout Section
Plataformas Comerciais
\end_layout

\begin_layout Standard
O grande potencial esperado para Internet das Coisas
\begin_inset CommandInset citation
LatexCommand cite
key "GoldmanSachs2014,url:cisco:iot:2015,url:webintel:2015"

\end_inset

, tem despertado a atenção de grandes empresas, que vem expandindo seus
 serviços, muitos deles baseados em nuvem, para atender requisitos de projetos
 de Internet das Coisas.
 A seguir, é apresentada uma lista resumida das principais empresas de oferecem
 serviços para IoT.
\end_layout

\begin_layout Subsection
Google
\end_layout

\begin_layout Standard
A Google vem investindo no cenário de IoT, e expandindo sua plataforma em
 nuvem, 
\emph on
Google Cloud Platform
\emph default
, para atender os requisitos de IoT.
 Os principais serviços incorporados na sua plataforma, são destacados a
 seguir:
\end_layout

\begin_layout Itemize
Google Cloud Pub/Sub: É projetado para fornecer de mensagens assíncronas
 muitos-para-muitos de maneira confiável entre aplicações.
\end_layout

\begin_layout Itemize
Device Streaming: Oferece suporte para processamento, armazenamento e análise
 de centenas de milhões de eventos.
\end_layout

\begin_layout Standard
A aquisição da empresa Nest em fevereiro de 2014, por cerca de 3,2 bilhões
 de dólares
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
http://www.cnet.com/news/google-closes-3-2-billion-purchase-of-nest/
\end_layout

\end_inset

, vem mostrando o direcionamento da empresa para áreas de computação embarcada
 e IoT.
 Outro projeto em desenvolvimento é o Brillo
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
https://developers.google.com/brillo/
\end_layout

\end_inset

, que tem como objetivo fornecer um sistema operacional para dispositivos
 embarcados baseados em plataformas ARM, Intel x86, and MIPS, focado em
 dispositivos com memória RAM a partir de 32MB.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Entretendo, as propostas observadas não parecem utilizar os eprotocolos
 abertos
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Novo projeto Beacons : https://developers.google.com/beacons/
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Oracle
\end_layout

\begin_layout Standard
Oferece uma plataforma
\begin_inset CommandInset citation
LatexCommand cite
key "oracle:iot"

\end_inset

 baseada em nuvem, para conectar, analisar, e integrar dispositivos, processos
 de negócios e aplicações.
 As principais recursos oferecidos estão relacionados à virtualização de
 dispositivos, comunicação bi-direcional, gerenciamento de metadados, processame
nto de eventos e 
\emph on
Big Data
\emph default
.
 
\end_layout

\begin_layout Subsection
Salesforce - IoT Cloud
\end_layout

\begin_layout Standard
A plataforma oferecida pela Salesforce
\begin_inset CommandInset citation
LatexCommand cite
key "salesforce:iot"

\end_inset

, é um serviço baseado em nuvem, focado principalmente em processamento
 de eventos complexos integrados com processos de negócio.
 O projeto denominado Salesforce Thunder, é a peça central da plataforma,
 e é apresentado pela empresa, como o motor de processamento de eventos
 mais rápido.
\end_layout

\begin_layout Subsection
IBM
\end_layout

\begin_layout Standard
A plataforma 
\begin_inset Quotes eld
\end_inset

IBM IoT Foundation
\begin_inset Quotes erd
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "ibm:iot"

\end_inset

, permite que as organizações conectem dispositivos de forma fácil e segura,
 a partir de chips à dispositivos inteligentes.
 Escalando através de serviços baseados em nuvem, e usando análises ricas,
 a plataforma fornece às organizações uma nova visão de inovação e transformação.
\end_layout

\begin_layout Standard
Outro projeto liderado pela empresa é o 
\begin_inset Quotes eld
\end_inset

Watson Internet of Things
\begin_inset Quotes erd
\end_inset

, que tem o foco na inteligência computacional de cognição e inferência.
\end_layout

\begin_layout Subsection
Amazon IoT
\end_layout

\begin_layout Standard
O AWS IoT
\begin_inset CommandInset citation
LatexCommand cite
key "amazom:iot"

\end_inset

 é uma plataforma que permite conectar dispositivos aos serviços da AWS
 e a outros serviços.
 Permite interação, processamento dos dados dos dispositivos e integração
 com aplicações, mesmo quando eles estiverem off-line.
 A empresa oferece um SDK (AWS IoT Device SDK), que permite que os dispositivos
 facilmente se conectem à nuvem usando protocolos MQTT ou HTTP, suportando
 dispositivos como Arduino e linguagens C e JavaScript.
\end_layout

\begin_layout Subsection
Microsoft
\end_layout

\begin_layout Standard
A recente parceria entre Microsoft e Arduino
\begin_inset CommandInset citation
LatexCommand cite
key "microsoft:arduino"

\end_inset

, demostra a aproximação da empresa na construção de projetos de IoT e o
 apoio à projetos open source
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
ref:https://microsoft.hackster.io/en-US
\end_layout

\end_inset

.
 A empresa possui projetos tanto a área de sistemas embarcados, com o sistema
 operacional Windows 10 IoT Core, compatível com Raspberry Pi, quando para
 serviços em nuvem, com o Azure IoT Suite
\begin_inset CommandInset citation
LatexCommand cite
key "microsoft:iot"

\end_inset

.
\end_layout

\begin_layout Subsection
Intel
\end_layout

\begin_layout Standard
A Intel é outra empresa que vem apostando fortemente no mercado de IoT,
 contando com projetos para dispositivos embarcados e soluções em nuvem.
 Na perspectiva de projetos cloud a empresa oferece o 
\begin_inset Quotes eld
\end_inset

Intel® IoT Platform
\begin_inset Quotes erd
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "intel:iot"

\end_inset

, com o objetivo de interconectar dispositivos de forma segura e escalável,
 permitindo a análise e extração de valor dos dados.
\end_layout

\begin_layout Standard
Na área de dispositivos embarcados a empresa oferece kits de desenvolvimento
 que contam com a placa Galileo, com compatível e certificada pelo Arduino
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
https://www.arduino.cc/en/ArduinoCertified/IntelGalileo
\end_layout

\end_inset

, e a placa Intel® Edison
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
https://software.intel.com/pt-br/iot/hardware/edison
\end_layout

\end_inset

, também compatível com Arduino e de fácil integração aos serviços Microsoft
 Azure IoT Suite e Amazon AWS.
\end_layout

\begin_layout Subsection
Xynvely
\end_layout

\begin_layout Standard
A plataforma Xively
\begin_inset CommandInset citation
LatexCommand cite
key "Xively:iot"

\end_inset

, desenvolvida pela empresa LogMeIn, utiliza serviços de nuvem para gerenciar
 dados providos por dispositivos.
 A plataforma fornece uma API para envio de dados a partir dos sensores,
 permitindo assim a visualização de dados históricos e provendo mecanismos
 para disparar eventos com base nos dados gerados pelos sensores (os chamados
 triggers).
 Na plataforma, os dados são organizados em feeds, datapoints e datastreams.
\end_layout

\begin_layout Section
Considerações Finais
\end_layout

\begin_layout Subsection
Análise das Plataformas Abertas
\end_layout

\begin_layout Standard
Os projetos selecionados para análise tem como característica em comum as
 capacidades de abstração de hardware, código fonte disponível, e o fato
 de terem sido desenvolvidos recentemente.
 O TinyDB e as plataformas comerciais não serão incluídos nessa análise.
\end_layout

\begin_layout Itemize
Disponibilidade de documentação e código fonte: 
\end_layout

\begin_deeper
\begin_layout Itemize
O(s) projeto(s): BUTLER, IoT@Work e LinkSmart, são projetos que apesar de
 terem código fonte disponível, não possuem informações de como realizar
 o processo de compilação, ou mesmo, não é disponibilizado o código de todos
 os componentes, impossibilitando a análise e testes aprofundados.
\end_layout

\begin_layout Itemize
O(s) projeto(s): OpenIoT e Eclipse IoT, possuem boa quantidade de documentação,
 guias de instalação e o código de todos componentes são acessíveis (github).
 Porém os dois possuem um processo de 
\begin_inset Quotes eld
\end_inset

setup
\begin_inset Quotes erd
\end_inset

 relativamente complexo.
\end_layout

\end_deeper
\begin_layout Itemize
Abstração do Hardware:
\end_layout

\begin_deeper
\begin_layout Itemize
Todos os projetos avaliados atendem bem a este requisito.
 No Eclipse IoT ele é implementado pelo sub-projeto chamado Leshan
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
http://www.eclipse.org/leshan/
\end_layout

\end_inset

, focado na comunicação M2M e CoAP.
\end_layout

\end_deeper
\begin_layout Itemize
Integração com plataformas de hardware mencionadas na seção 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Plataformas-de-Desenvolvimento"

\end_inset

:
\end_layout

\begin_deeper
\begin_layout Itemize
O(s) projeto(s): Eclipse IoT, é um dos poucos a dar ênfase nessas plataformas,
 porém, devido o requisito anterior, existem algumas lacunas a serem abordadas.
 
\end_layout

\end_deeper
\begin_layout Itemize
Complexidade no desenvolvimento de projetos:
\end_layout

\begin_deeper
\begin_layout Itemize
O(s) projeto(s): BUTLER, IoT@Work e LinkSmart, não puderam ser avaliados
 conforme a complexidade do desenvolvimento, pois não possuem instaladores,
 nem foi possível a compilação a partir dos códigos fonte.
\end_layout

\begin_layout Itemize
O(s) projeto(s): Eclipse IoT e OpenIoT, devido à grande quantidade de componente
s, possuem um processo de compilação complexo e demoraram para serem configurado
s.
 O Eclipse IoT é o mais favorável neste quesito, apesar de termos encontrado
 algumas falhas nos testes iniciais.
\end_layout

\end_deeper
\begin_layout Itemize
Ferramentas para auxílio na construção das aplicações embarcadas (firmware):
\end_layout

\begin_deeper
\begin_layout Itemize
O(s) projeto(s): Eclipse IoT, possui subprojetos WAKAAMA e Leshan, que possuem
 recursos e bibliotecas em C para desenvolvimento para microcontroladores,
 porém o mesmo, necessita de 100kb de flash e 10kb de RAM.
 O sub-projeto Eclipse Paho, disponibiliza bibliotecas compatíveis com o
 Arduino para comunicação usando MQTT.
\end_layout

\end_deeper
\begin_layout Itemize
Ferramentas de visualização e interface com os dispositivos:
\end_layout

\begin_deeper
\begin_layout Itemize
O(s) projeto(s): OpenIoT, oferece interfaces avançadas para configuração
 de dispositivos, composição e orquestração de serviços.
 O projeto Eclipse IoT, mais especificamente o sub-projeto Leshan, possuí
 alguns recursos simples para interação com os dispositivos.
\end_layout

\end_deeper
\begin_layout Itemize
Abstração de comunicações: Bluetooth, USB, Ethernet, WiFi:
\end_layout

\begin_deeper
\begin_layout Itemize
A maioria dos projetos estão voltados para comunicação usando protocolo
 IP, com exceção do Eclipse IoT (subprojeto Kura), que possui implementações
 para comunicação USB e Bluetooth.
\end_layout

\end_deeper
\begin_layout Itemize
Auxílio na construção de aplicações Web:
\end_layout

\begin_deeper
\begin_layout Itemize
O(s) projeto(s): Eclipse IoT, possuem implementações de clientes MQTT em
 JavaScript no sub-projeto Paho, porém não possui nenhuma implementação
 para abstração de dispositivos na camada Web em JavaScript.
 
\end_layout

\end_deeper
\begin_layout Itemize
Auxílio na construção de aplicações Mobile (Android):
\end_layout

\begin_deeper
\begin_layout Itemize
O(s) projeto(s): Eclipse IoT, possui apenas implementação para clientes
 MQTT, e no projeto OpenIoT, foram encontradas apenas interfaces gráficas
 de visualização de dispositivos, nenhuma ferramenta específica para desenvolvim
ento.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
faltando.................
 Utilização de protocolos abertos
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Análise das Plataformas Comerciais
\end_layout

\begin_layout Standard
Não é objetivo desta dissertação o aprofundamento na análise de plataformas
 proprietárias, limitando-se apenas a algumas considerações.
\end_layout

\begin_layout Standard
As plataformas proprietárias oferecem um requisito importante para projetos
 de IoT, principalmente, quando os mesmos necessitarem trabalhar com uma
 grande quantidade de dispositivos, que está relacionado à escalabilidade.
 A maioria das soluções abordadas neste trabalho, são de empresas que oferecem
 outros serviços relacionados a 
\emph on
cloud computing
\emph default
, que por natureza, necessitam de um infraestrutura altamente escalável.
 Por outro lado, essas plataformas comerciais precisam estar baseadas em
 protocolos abertos para sua ampla difusão e penetração do mercado de IoT.
\end_layout

\begin_layout Standard
As empresas que mais se destacam no desenvolvimento e apoio de padrões abertos
 são a Amazon AWS, Microsoft (contrariando as expectativas) e Intel.
 Estas empresas, também oferecem suporte para os hardwares abertos (como
 Arduino), e biliotecas para a integração com seus serviços em núvem.
\end_layout

\begin_layout Standard
A Google, na sua plataforma, parece estar direcionada a usar seus próprios
 padrões
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
http://venturebeat.com/2015/05/28/google-announces-brillo-os-for-the-internet-of-
things/
\end_layout

\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
https://cloud.google.com/pubsub/docs
\end_layout

\end_inset

, e até o momento não oferece suporte ao MQTT.
 
\end_layout

\end_body
\end_document
